---
title: a9s Service Dashboard
owner: Partners
---

This topic describes how to use the a9s Service Dashboard.

## <a id='login'></a> Login

1. To get the a9s Service Dashboard URL use the command `cf service SERVICE-NAME`. For example:
  ```bash
  $ cf service my-redis
  Showing info of service my-redis in org demo / space demo as admin...

  name:            my-redis
  service:         a9s-redis32
  tags:
  plan:            redis-single-small
  description:     This is a service creating and managing dedicated Redis service instances, powered by the anynines Service Framework
  documentation:
  dashboard:       https://a9s-redis-dashboard.system.172.28.32.25.xip.io/service-instances/96aaef1d-be67-45fc-a121-25160bf83ab2

  This service is not currently shared.

  Showing status of last operation from service my-redis...

  status:    create succeeded
  message:
  started:   2018-10-17T11:25:04Z
  updated:   2018-10-17T11:29:10Z

  There are no bound apps for this service.
  ```

2. Browse to the dashboard URL and authenticate on the redirected page with your Cloud Foundry credentials:
![authentication-page](images/authentication-page.png)

3. Click **Authorize** to approve the authorization request:
![authorization-page](images/authorization-page.png)

## <a id='perform-a-backup'></a> Perform a Backup

Open the Service Dashboard for the Service Instance you want to backup, as shown
above. Navigate to the **Backups** page. There you find a panel with
**Available Backups** and a **Trigger Backup** button. Click this button to
perform a new backup of the Service Instance.

<%= image_tag("service-dashboard-backups.png") %>

After a short period of time the backup will be queued. The backup process will
start soon.

<%= image_tag("service-dashboard-backups-backup-triggered.png") %>

**NOTE:** Depending on the size of the data the backup will take some time.

<%= image_tag("service-dashboard-backups-backup-final.png") %>

## <a id='restore-a-backup'></a> Restore a Backup

Open the Service Dashboard for the Service Instance, as shown above, you want
to restore a backup that you performed before. Navigate to the **Backups** page.
There you find a panel with **Available Backups** and a **Restore** button next
to each backup. Click this button to trigger a restore.

<%= image_tag("service-dashboard-backups-backup-final.png") %>

A dialog opens and ask for confirmation. Press the **Restore** button to
continue or the **Cancel** button to abort the restore.

<%= image_tag("service-dashboard-backups-restore-dialog.png") %>

After a short period of time the restore will be queued. The restore process
will start soon.

<%= image_tag("service-dashboard-backups-restore-triggered.png") %>

**NOTE:** Depending on the size of the data the restore will take some time.

<%= image_tag("service-dashboard-backups-restore-final.png") %>

## <a id='download-a-backup'></a> Download a backup

To be able to download a performed backup first you have to set a personal
encryption key. Otherwise a performed backup is not downloadable.

To set a personal encryption key open the Service Dashboard for the appropriate
Service Instance as shown above. Navigate to the **Backups** page and open the
**Backup Settings** by clicking the **Edit** button on that panel.

<%= image_tag("service-dashboard-backups-restore-final.png") %>

Enter your personal encryption key in the field **Encryption Key** and click the
**Save** button. The default minimum length for your personal encryption key is
8.

<%= image_tag("service-dashboard-backups-settings.png") %>

After that perform a backup as shown above. If the backup is successfully
finished an additional button **Download** appears beside the backup. Click
this button to download the corresponding backup.

<%= image_tag("service-dashboard-backups-download.png") %>

**NOTE:** If you change your personal encryption key again you are not longer
able to download performed backups encrypted with your old personal encryption
key.

## <a id='update-the-service-instance'></a> Update the Service Instance

<%= image_tag("service-dashboard-updates.png") %>

## <a id='dashboard-api'></a> Dashboard API

This topic describes how to use the a9s Service Dashboard API, in order to enable and disable
features in the frontend, get information about the service instance or start or restore backups.

### <a id='how-to-access-the-dashboard-api-using-curl'></a> How to access the Dashboard API using curl

We run the Dashboard API protected by the SSO proxy.
This means that in order to access this API, we need first to be authenticated and authorised to access it.

#### <a id='authentication'></a> Authentication

To correctly authorise the access when accessing using curl, the user must first get the token from Cloud Foundry:

```sh
$ oauth_token=$(cf oauth-token)
$ bearer_token=$(echo ${oauth_token} | grep bearer)
```

Then, get the dashboard url using `cf service`:

```sh
$ cf service <service>
```

This should give you an output like:
```
Showing info of service es6-ss in org a9s-smoke-tests / space elasticsearch-smoke-tests as admin...

name:            es6-ss
service:         a9s-redis
...
dashboard:       https://a9s-redis-dashboard.[your-domain.com]/service-instances/db8d8ad3-3d72-4f5a-b84a-47aa9df70a7d

Showing status of last operation from service es6-ss...

status:    create succeeded
...
```

In the example above, the url is:
```bash
$ url="https://a9s-redis-dashboard.[your-domain.com]/service-instances/db8d8ad3-3d72-4f5a-b84a-47aa9df70a7d"
```

#### <a id='authorization'></a> Authorization

The the user must execute the request with the given token:

```sh
$ curl --cookie test.cookie --cookie-jar test.cookie --location --insecure \
  --header "Authorization: ${bearer_token}" "${url}"
```

Remember to use `--location`, since the sso-proxy redirects to the real endpoint.
Use `--insecure` only if running with self generated certificates.

You should also use cookies. The authentication is handled by Cloud Foundry,
so when you have a valid token you are authenticated. With this token,
the SSO Proxy checks if you are authorized to access the dashboard for the given instance.

Once the user is authorized, this information is stored in the session, which is then stored in the cookie. After this, the requests can be redirected to the dashboard-api and the user can access all the provided endpoints as [described below](#dashboard-api-endpoints).

### <a id='dashboard-api-endpoints'></a> Dashboard API Endpoints

#### <a id='api-get-backups'></a> GET /service-instances/:guid/backups

Lists all available backups as well as the restores that have been applied.

##### Request

###### Route
```
GET /service-instances/db8d8ad3-3d72-4f5a-b84a-47aa9df70a7d/backups
```

###### Body
| Name | Type | Description |
|-----------|------|-------------|
| guid | string | The GUID from the service instance. |

###### Headers
```
Authorization: bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImtleSIsI ... nR5cCI6IkpXVCJ9.eyJqdGkiO ... _YwDVve7co77BoYAvhFrbnVgWMp5A

```

##### cURL
```sh
curl --cookie test.cookie --cookie-jar test.cookie --location --insecure --header "Authorization: ${bearer_token}" "${url}/backups"
```

##### Response

###### Status
```
  200 OK
```

###### Body
```json
{
  "id": 85,
  "instance_id": "f131e47d-c88b-4a86-ad0f-93cbb55e2885",
  "backups": [
    {
      "id": 2811,
      "instance_id": 85,
      "backup_agent_task": {
        "id": 2901,
        "task_id": 2811,
        "status": "done",
        "created_at": "2017-06-29T00:30:03.857Z",
        "updated_at": "2017-06-29T00:30:18.091Z"
      }
    }
  ],
  "restores": [
    {
      "id": 84,
      "instance_id": 85,
      "backup_agent_tasks": [
        {
          "id": 843,
          "task_id": 84,
          "status": "done",
          "created_at": "2017-06-20T14:51:08.661Z",
          "updated_at": "2017-06-20T14:51:19.856Z"
        }
      ]
    }
  ]
}
```

#### <a id=''>api-trigger-backup</a> POST /service-instances/:guid/backups

Start a backup process on a given service instance.

##### Request

###### Route
```
POST /service-instances/db8d8ad3-3d72-4f5a-b84a-47aa9df70a7d/backups
```

###### Body
| Name | Type | Description |
|-----------|------|-------------|
| guid | string | The GUID from the service instance. |

###### Headers
```
Authorization: bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImtleSIsI ... nR5cCI6IkpXVCJ9.eyJqdGkiO ... _YwDVve7co77BoYAvhFrbnVgWMp5A

```

##### cURL
```sh
curl --cookie test.cookie --cookie-jar test.cookie --location --insecure --header "Authorization: ${bearer_token}" -X POST "${url}/backups"
```

##### Response

###### Status
```
  201 Created
```

#### <a id='api-restore-instance'></a> POST /service-instances/:guid/backups/restore

Restores a backup to a given service instance.

##### Request

###### Route
```
POST /service-instances/db8d8ad3-3d72-4f5a-b84a-47aa9df70a7d/backups/restore
```

###### Parameters
| Name | Type | Description |
|-----------|------|-------------|
| instance_id | string | Backup manager internal ID of the service instance. |
| backup_id | string | The backup ID from the service instance backup. |

###### Body
| Name | Type | Description |
|-----------|------|-------------|
| guid | string | The GUID from the service instance. |

###### Headers
```
Authorization: bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImtleSIsI ... nR5cCI6IkpXVCJ9.eyJqdGkiO ... _YwDVve7co77BoYAvhFrbnVgWMp5A

```

##### cURL
```sh
curl --cookie test.cookie --cookie-jar test.cookie --location --insecure --header "Authorization: ${bearer_token}" -X POST "${url}/backups/restore" --data "instance_id=db8d8ad3-3d72-4f5a-b84a-47aa9df70a7d" --data "backup_id=1"
```

##### Response

###### Status
```
  200 OK
```
